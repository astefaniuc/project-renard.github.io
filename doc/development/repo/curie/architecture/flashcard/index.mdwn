[[!meta title="Flashcard architecture"]]
[[!meta description="Architecture for adding flashcards to curie"]]

# Tasks

1. DB
    1. [✓] All documents need to be stored with their checksum and path.
        - This is so that a file can be associated with a document ID in the DB.
        - Use [[`Digest::MD5`|https://p3rl.org/Digest::MD5]].
2. Automatic phrase extraction
    1. [✓] Process the text of a PDF file with [[PyTextRank|https://github.com/ceteri/pytextrank]].
    2. [✓] Find the text of phrases inside that PDF file.
        - Use [[`Regexp::Assemble`|https://p3rl.org/Regexp::Assemble]].
    3. [_] Toggle option to highlight all the phrases found on the page.
4. Card
    1. Contents
        - Front: the question / hint : always shown
        - Back: the answer    : shown when card state is flipped
        - Explanation: why?   : shown when card state is flipped
        - Priority
        - Tags
        - Document
        - Page
        - Cloze
            1. Cloze regex
                - Need to be able to cover a set of given text offsets.
            2. Overlap types
                - nonoverlapping: Hide all, reveal one
                - overlapping: Hide one, reveal all
                - Hide all, reveal all
5. Review
    - Sequential
        - Sort by path -> page -> offset
    - Random
        - Random
    - SRS
        - See description of algorithm.

# SRS algorithm


# GUI

## Show / edit card

[[!uml src="""
salt
{+
    Progress | { "[xxxxx 40%			" |  }
    ==
    Front
    --
    Back
    --
    Explanation
    ==
    Next | { [ Flip ] | [ Edit ] | [ Edit duplicate ] }
    ..
    Difficulty | { [ Again ] | [ Hard ] | [ Good ] | [ Easy ] } | (only when method is srs)
    ..
    Hide card    | { [ Suspend/Unsuspend ] }
}
"""]]

[[!uml src="""
salt
{+
    {
        {
            Front         | { "Question?" } | text entry
            Back          | { "Answer." }   | text entry
            Explanation   | { "Why?" }      | text entry
            Tags          | { "anatomy::back s1::m1" }
            Priority      | { "0 ↕" }
            Scheduled for | { "2018-05-22" } | (calendar widget)

            Document     | {^Name^ }    | (choose from the ones in the document collection)
            Page         | { ^Number^ } | (use the number of pages in the document)

            Cloze regex  | { "qr/.../" | number of matches on page } | (list box, search the page, highlight, draw number)
            Matches      | {""} | (blank use all)
            ^Overlap type^
        }
    }

    { [ Save ] | [ Cancel ] }
}
"""]]


## Review table

Two kinds of review tables:

- All cards from current document set.
- All cards in the current review.

[[!uml src="""
salt
{+
    {#
      Rank | File | Page | Phrase         | Due date   | # of review | # of consecutive correct | e-factor
      0    | abc  | 1    | some keyword   | 2018-05-22 | 5           | 3                        | 2.4
      0    | abc  | 2    | another phrase | 2018-05-22 | 8           | 2                        | 0.4

    }
    [ Edit ] | [ New card ] | [ Update list ] | [ Clear ]
}
"""]]

## Review control

Generate deck: insert cards into the current review.

[[!uml src="""
salt
{+
    Generate deck |

    {
        Method | { (X) Sequential | ( ) Random | ( ) SRS }

        Tag search | { "anatomy -anatomy::back" | [ Clear ] }

        Number of cards | { "2000 ↕" | / 5000 total }

        "100% ↔" | [ Set number of cards % of total ]

        SRS options | {
            Steps minutes |    "1 10"
            Graduating interval (days) | "1"
            Easy interval (days)| "4"
            Interval modifier | "100% ↔"
        }

        [ Generate ]
    }

    ==

    Review | { [ Start / Pause ] }
}
"""]]

# Current schema

[[!uml src="""
!include templates/plantuml/er.iuml

' entities
Table(document, "Document\n(A document file)") {
    primary_key(id) INTEGER
    not_null(md5sum) VARCHAR[32]
    path TEXT
}

Table(ignored_doc, "IgnoredDoc\n(Ignore this\ndocument?)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(ignored) BOOLEAN
}

Table(phrase_cloze, "PhraseCloze\n(Some info of user)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(page) INTEGER
    not_null(text) TEXT
    not_null(offset_start) INTEGER
    not_null(offset_end) INTEGER
    not_null(suspended) BOOLEAN
    not_null(ignored) BOOLEAN
}

Table(processed_doc_pytextrank, "ProcessedDocPytextrank") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(processed) BOOLEAN
}

Table(pytextrank_cloze, "PytextrankCloze") {
    primary_key(phrase_cloze_id) INTEGER
    primary_key(pytextrank_data_id) INTEGER
}

Table(pytextrank_data, "PytextrankData") {
    primary_key(id) INTEGER
    not_null(processed_doc_pytextrank_id) INTEGER
    not_null(count) INTEGER
    not_null(pos) TEXT
    not_null(rank) REAL
    not_null(text) TEXT
}


' relationships

' one-to-one relationship

document "?" -- processed_doc_pytextrank: "document_id:\nA document may\nbe processed\nusing PyTextRank"
document "?" -- ignored_doc : "document_id:\nA document\nmay be ignored"

' one to many relationship
document --> phrase_cloze

phrase_cloze "?" --> pytextrank_cloze
pytextrank_data --> pytextrank_cloze

processed_doc_pytextrank --> pytextrank_data


' many to many relationship

"""]]

# New schema

[[!uml src="""
!include templates/plantuml/er.iuml

' entities
Table(document, "Document\n(A document file)") {
    primary_key(id) INTEGER
    not_null(md5sum) VARCHAR[32]
    path TEXT
}

Table(ignored_doc, "IgnoredDoc\n(Ignore this\ndocument?)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(ignored) BOOLEAN
}

Table(cards, "Cards") {
    primary_key(id) INTEGER
}

Table(reviews, "Reviews") {
    primary_key(id) INTEGER
    not_null(date) INTEGER
    not_null(type) TEXT
    not_null(cards) INTEGER
    not_null(finished) BOOLEAN
}

Table(review_cards, "ReviewCards") {
    primary_key(id) INTEGER
}

Table(phrase_cloze, "PhraseCloze\n(Some info of user)") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(page) INTEGER
    not_null(text) TEXT
    not_null(offset_start) INTEGER
    not_null(offset_end) INTEGER
    not_null(suspended) BOOLEAN
    not_null(ignored) BOOLEAN
}

Table(processed_doc_pytextrank, "ProcessedDocPytextrank") {
    primary_key(id) INTEGER
    not_null(document_id) INTEGER
    not_null(processed) BOOLEAN
}

Table(pytextrank_cloze, "PytextrankCloze") {
    primary_key(phrase_cloze_id) INTEGER
    primary_key(pytextrank_data_id) INTEGER
}

Table(pytextrank_data, "PytextrankData") {
    primary_key(id) INTEGER
    not_null(processed_doc_pytextrank_id) INTEGER
    not_null(count) INTEGER
    not_null(pos) TEXT
    not_null(rank) REAL
    not_null(text) TEXT
}


' relationships

' one-to-one relationship

document "?" -- processed_doc_pytextrank: "document_id:\nA document may\nbe processed\nusing PyTextRank"
document "?" -- ignored_doc : "document_id:\nA document\nmay be ignored"

' one to many relationship
document --> phrase_cloze

phrase_cloze "?" --> pytextrank_cloze
pytextrank_data --> pytextrank_cloze

processed_doc_pytextrank --> pytextrank_data


' many to many relationship

"""]]

