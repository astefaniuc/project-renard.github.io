[[!meta title="Interaction"]]

[[!toc levels=3]]

# Zooming User Interface

A [[zooming user interface (ZUI)|http://en.wikipedia.org/wiki/Zooming_user_interface]] can be used to
display many different kinds of information at various scales, however they can
be challening to implement for many of the same reasons that using a clutter
graph can be.

# View options

## Examples of supported layouts

### Single page example

[[!graph src="""
VC [label = "View Collection" ]

G0 [label = "Grid[r=1, c=1]" ]
G1 [label = "Grid[r=1, c=1]" ]
G2 [label = "Grid[r=1, c=1]" ]

rankdir = LR;
{
{
VC -> G0 [label = "[0]" ];
VC -> G1 [label = "[1]" ];
VC -> G2 [label = "[2]" ];
}

{
G0 -> P0 [label = "renders"];
G1 -> P1 [label = "renders"];
G2 -> P2 [label = "renders"];
}
}

P0 [label = "Page[0]" ]
P1 [label = "Page[1]" ]
P2 [label = "Page[2]" ]

P0 -> D0 [dir = back, label = "[0]"];
P1 -> D0 [dir = back, label = "[1]"];
P2 -> D0 [dir = back, label = "[2]"];

D0 [label = "Document" ]

"""]]

### Dual page example

[[!graph src="""
VC [label = "View Collection" ]

G0 [label = "Grid[r=1, c=2]" ]
G1 [label = "Grid[r=1, c=2]" ]
G2 [label = "Grid[r=1, c=2]" ]

rankdir = LR;
{
{
VC -> G0 [label = "[0]" ];
VC -> G1 [label = "[1]" ];
VC -> G2 [label = "[2]" ];
}

{
G0 -> P0 [label = "renders"];
G0 -> P1 [label = "renders"];
G1 -> P2 [label = "renders"];
G1 -> P3 [label = "renders"];
G2 -> P4 [label = "renders"];
G2 -> P5 [label = "renders"];
}
}

P0 [label = "Page[0]" ]
P1 [label = "Page[1]" ]
P2 [label = "Page[2]" ]
P3 [label = "Page[3]" ]
P4 [label = "Page[4]" ]
P5 [label = "Page[5]" ]

P0 -> D0 [dir = back, label = "[0]"];
P1 -> D0 [dir = back, label = "[1]"];
P2 -> D0 [dir = back, label = "[2]"];
P3 -> D0 [dir = back, label = "[3]"];
P4 -> D0 [dir = back, label = "[4]"];
P5 -> D0 [dir = back, label = "[5]"];

D0 [label = "Document" ]

"""]]

# Views

## Definitions

**Page range**: a page range indicates the which pages an operation is applied upon.

**Transformation**: (scale, rotate, shear, crop).

**Continuous**: a continuous view puts all the pages.

**Columns**: number of items to show in each row.

**Alignment**: left, center, right; horizontal, vertical.

## Grid

View is made up of a grid. A grid has rows and columns.

[[!format txt """
 +---+---+---+
 |   |   |   |  row 1
 +---+---+---+
 |   |   |   |  row 2
 +---+---+---+
   c   c   c 
   o   o   o 
   l   l   l 
             
   1   2   3 
"""]]


### Page order

These rows and columns can be filled in certain ways:

- left-to-right-then-left-to-right

[[!format txt """
 +---+---+---+
 | 1 | 2 | 3 |
 +---+---+---+
 | 4 | 5 | 6 |
 +---+---+---+
"""]]

- right-to-left-then-right-to-left

[[!format txt """
 +---+---+---+
 | 3 | 2 | 1 |
 +---+---+---+
 | 6 | 5 | 4 |
 +---+---+---+
"""]]

### Layout

The grid can have a defined number of columns and defined number of rows that
will be used for layout. This can be in the form of

- Defined rows, Defined columns

Example: Rows: 2, Columns: 3, Total Pages: 11

[[!format txt """
 View 1                     View 2
 +---+---+---+              +---+---+---+
 | 1 | 2 | 3 |              | 7 | 8 | 9 |
 +---+---+---+              +---+---+---+
 | 4 | 5 | 6 |              |10 |11 | - |
 +---+---+---+              +---+---+---+
"""]]

- Undefined rows, Defined columns

Example: Rows: undefined, Columns: 3, Total Pages: 11

[[!format txt """
View
 +---+---+---+
 | 1 | 2 | 3 |
 +---+---+---+
 | 4 | 5 | 6 |
 +---+---+---+
 | 7 | 8 | 9 |
 +---+---+---+
 |10 |11 | - |
 +---+---+---+
"""]]

- Defined rows, Undefined columns

Example: Rows: 2, Columns: undefined, Total Pages: 11

[[!format txt """
View
 +---+---+---+---+---+---+
 | 1 | 2 | 3 | 4 | 5 | 6 |
 +---+---+---+---+---+---+
 | 7 | 8 | 9 |10 |11 | - |
 +---+---+---+---+---+---+
"""]]


This provides a generalisable approach to rectangular layout that can
incorporate the idea of continuous pages and how many pages should be fit into
the current view.

### Alignment

The grid approach offers two places where alignment can occur:

  1. Within each cell of the grid: this is only important if the page size changes within the view.
  2. With respect to the parent widget: this requires computing the size of the entire grid.

### Algorithm

[[!format txt """
PageRange_start ← start of pages to render
PageRange_end   ← end of pages to render

G_r ← number of rows in grid
G_d ← number of rows in grid

if defined(G_r) and defined(G_d) then
    # We need to split into views
    NumOfPagesPerView ← G_r × G_d
    NumberOfViews ← ceil( ( PageRange_end - PageRange_start + 1 ) / NumOfPagesPerView )
    for k ∈ [0, NumberOfViews)
        View[ k ] ← Grid( G,
                            ( k * NumOfPagesPerView ) + PageRange_start,
                            min( ( (k + 1) × NumOfPagesPerView ) + PageRange_start - 1 , PageRange_end )
                     )
    end
else
    View ← Grid(G, PageRange_start, PageRange_end )
end

define Grid( Grid, P_start, P_end )
    Intercell_width ← length between columns
    Intercell_height ←  length between rows
    GridWidth ← …
end
"""]]


### Page sequence

Finite / infinite

### Transformations

#### Global transformation

#### Page transformation




[[!uml src="""
Document *-- "many" Page: contains

View *-- "1" Layout

class Layout {
    PositiveInt number_of_items;

    GlobalBoundingBox nth_bounding_box( PositiveInt item_num );
}
class Grid extends Layout {
    Maybe[PositiveInt] rows;
    Maybe[PositiveInt] columns;
}

class Document {
    Page get_page();
}

class Page {
    Transformation @transformations;

}

class View {
    Transformation @transformations;
    Layout layout;
    PageRenderer renderer;
}

class PageRenderer {
    CairoSurface render_cairo_surface( Page p, Transformation t );
}
"""]]
