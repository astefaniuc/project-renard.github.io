---
repo: project-renard/p5-Renard-Jacquard
cpan: Renard-Jacquard
type: library
travis-ci: https://travis-ci.org/project-renard/p5-Renard-Jacquard
travis-ci-badge: https://travis-ci.org/project-renard/p5-Renard-Jacquard.svg?branch=master
appveyor-ci: https://ci.appveyor.com/project/zmughal/p5-Renard-Jacquard
appveyor-ci-badge: https://ci.appveyor.com/api/projects/status/hfcpypsapfq62u4l/branch/master?svg=true
coveralls: https://coveralls.io/github/project-renard/p5-Renard-Jacquard?branch=master
coveralls-badge: https://coveralls.io/repos/github/project-renard/p5-Renard-Jacquard/badge.svg?branch=master
released-to-cpan: false
---
[[!ftemplate id=repo]]

See [[Jacquard loom|https://en.wikipedia.org/wiki/Jacquard_loom]].



# Render tree

## Transformation order

### Rect sizes

[[!teximg  code="""
\begin{aligned}
r_0 :  [ 2   , 0.5 ] \times [ 100, 200 ] &= [ 200, 100 ]\\
r_1 :  [ 1   , 0.8 ] \times [ 100, 200 ] &= [ 100, 160 ] \\
r_2 :  [ 2.5 , 0.8 ] \times [ 100, 200 ] &= [ 250, 160 ] \\
r_3 :  [ 1   , 1.0 ] \times [ 100, 200 ] &= [ 100, 200 ] \\
\end{aligned}
"""]]

### What is currently happening:

#### Placement

[[!teximg code="""
\begin{aligned}
r_0 &: [ 0    ,& 0   ] \\
r_1 &: [ 250  ,& 0   ] \\
r_2 &: [ 0    ,& 128 ] \\
r_3 &: [ 250  ,& 160 ] \\
\end{aligned}
"""]]

#### Matrices

[[!teximg  code="""
\begin{aligned}
r_2 &= \underbrace{
    I
}_{\text{\textbf{All}}}
%
\underbrace{
    \begin{pmatrix}
        1 & 0   & 0 & 0 \\
        0 & 1   & 0 & 0 \\
        0 & 0   & 1 & 0 \\
        0 & 160 & 0 & 1 \\
    \end{pmatrix}
}_{\text{\textbf{Autofill(2,2)}}}
\underbrace{
    \begin{pmatrix}
        2.5 & 0   & 0 & 0 \\
        0   & 0.8 & 0 & 0 \\
        0   & 0   & 1 & 0 \\
        0   & 0   & 0 & 1 \\
    \end{pmatrix}
}_{\text{\textbf{Affine}}} \\
&=
    \begin{pmatrix}
        2.5 &     0 &   0  &   0 \\
        0   &   0.8 &   0  &   0 \\
        0   &     0 &   1  &   0 \\
        0   &   128 &   0  &   1 \\
    \end{pmatrix}
\\
\end{aligned}
"""]]

[[!format txt """
>> r_2 = eye(4) * [ eye(3,4) ; 20 160 0 1 ] * diag( [2.5 0.8 1 1 ] )

r_2 =

    2.5000         0         0         0
         0    0.8000         0         0
         0         0    1.0000         0
   50.0000  128.0000         0    1.0000
"""]]

### What needs to happen:

#### Placement

[[!teximg code="""
\begin{aligned}
r_0 &: [ 0    ,& 0   ] \\
r_1 &: [ 250  ,& 0   ] \\
r_2 &: [ 0    ,& 160 ] \\
r_3 &: [ 250  ,& 160 ] \\
\end{aligned}
"""]]

#### Matrices

[[!teximg code="""
\begin{aligned}
r_2 &=
\underbrace{
    \begin{pmatrix}
        2.5 & 0   & 0 & 0 \\
        0   & 0.8 & 0 & 0 \\
        0   & 0   & 1 & 0 \\
        0   & 0   & 0 & 1 \\
    \end{pmatrix}
}_{\text{\textbf{Affine}}}
%
\underbrace{
    I
}_{\text{\textbf{All}}}
%
\underbrace{
    \begin{pmatrix}
        1 & 0   & 0 & 0 \\
        0 & 1   & 0 & 0 \\
        0 & 0   & 1 & 0 \\
        0 & 160 & 0 & 1 \\
    \end{pmatrix}
}_{\text{\textbf{Autofill(2,2)}}} \\
&=
    \begin{pmatrix}
    2.5000 &       0  &      0 &       0 \\
         0 &  0.8000  &      0 &       0 \\
         0 &       0  & 1.0000 &       0 \\
         0 &160.0000  &      0 &  1.0000 \\
    \end{pmatrix}
\\
\end{aligned}
"""]]

[[!format txt """
>> r_2 = diag( [2.5 0.8 1 1 ] ) * eye(4) * [ eye(3,4) ; 0 160 0 1 ]

r_2 =

    2.5000         0         0         0
         0    0.8000         0         0
         0         0    1.0000         0
         0  160.0000         0    1.0000
"""]]

## UML

[[!graph src="""
root -> item1


item1_vn [shape=circle,width=.01,height=.01,label=""]; item1 -> item1_vn [arrowhead=none, label="has"];
item1_vn -> { transform, position, layout, content };

position -> layout [ label = "calls" ];
content -> rectangle [ label = "has" ];

rectangle -> size
rectangle -> "render_tree(state)"

"render_tree(state)" -> render_tree_root

render_tree_root -> "Taffetta::Rectangle"

state -> transform -> size

state -> push_transform
state -> position

"""]]

[[!uml src="""
RootNode *-- ItemNode: contains

ItemNode *-- Rectangle: contains

ItemNode *-- Layout: contains

class State {
    Transform transform;
}

class RootNode {
    ItemNode item1;
}

class ItemNode {
    Content content;
    Layout layout;
    Transform transform;

    ---
    Transform get_current_transform( $state ) {
    \t $state->apply_transform( $transform );
    \}
    ---

    Position position() {
    \t $self->layout->get_position( $state, $self )
    \}
}

class Layout {
    Position get_position( $actor );
}

class Rectangle extends Content {
    PositiveInt width;
    PositiveInt height;

    RenderTree get_render_tree( $state );
}

class RenderTreeNode {
    Taffetta::Rectangle object;
}

"""]]
